@page "/Medchain/login/"
@using MedChain_BLL.DTOs
@using MedChain_Models.Enums
@using MedChain_BLL.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IAuthService authService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject ProtectedSessionStorage protectedSessionStore

<div class="login-container">
    <h2>Login</h2>

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <div class="mt-3">
        <span>Don't have an account? </span>
        <a href="/Medchain/Register/">Register here</a>
    </div>
</div>

@code {
    private LoginDTO loginModel = new LoginDTO();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null; // Clear previous error messages

        try
        {
            var result = await authService.Login(loginModel);

            if (result.IsSuccess && !string.IsNullOrEmpty(result.Token))
            {
                await protectedSessionStore.SetAsync("authToken", result.Token);

                // Update authentication state
                ((CustomAuthStateProvider)authenticationStateProvider).NotifyUserAuthentication(result.Token);

                navigationManager.NavigateTo(result.Role switch
                {
                    "Admin" => "/admin",
                    "Doctor" => "/doctor",
                    "Patient" => "/patient",
                    _ => "/"
                }, forceLoad: true);
            }
            else
            {
                errorMessage = result.Message ?? "Login failed. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during login. Please try again.";
            // Log the exception here if needed
        }
    }
}