@page "/Medchain/login/"
@using MedChain_BLL.DTOs
@using MedChain_BLL.Interfaces
@using MedChain_Models.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedSessionStorage ProtectedSessionStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> _logger

<div class="login-container">
    <h2>Login</h2>

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <div class="mt-3">
        <span>Don't have an account? </span>
        <a href="/Medchain/Register/">Register here</a>
    </div>
</div>

@code {
    private LoginDTO loginModel = new();
    private string? errorMessage;
    private bool isProcessing = false;

    private async Task HandleLogin()
    {
        if (isProcessing) return;
        isProcessing = true;
        errorMessage = null;
        AuthResponseDTO? result = null; // Declare result outside try block

        try
        {
            // Validate input
            if (string.IsNullOrWhiteSpace(loginModel.Email) ||
                string.IsNullOrWhiteSpace(loginModel.Password))
            {
                errorMessage = "Please enter both email and password";
                isProcessing = false;
                return;
            }

            _logger.LogInformation("Login attempt for email: {Email}", loginModel.Email);

            // Call authentication service
            result = await AuthService.Login(loginModel);

            if (result.IsSuccess && !string.IsNullOrEmpty(result.Token))
            {
                _logger.LogDebug("Login successful, token received. Role: {Role}", result.Role);

                if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
                {
                    try
                    {
                        await customProvider.NotifyUserAuthenticationAsync(
                            result.Token,
                            loginModel.Email);

                        // Wait for UI state to update before navigation
                        await Task.Delay(500);
                        _logger.LogDebug("Authentication state updated successfully");
                    }
                    catch (Exception authEx)
                    {
                        _logger.LogError(authEx, "Failed to notify authentication state change");
                        errorMessage = "Authentication succeeded but state update failed";
                        return;
                    }
                }

                // Navigate based on role
                var targetPage = result.Role switch
                {
                    "Admin" => "/admin",
                    "Doctor" => "/doctordashboard",
                    "Patient" => "/patient",
                    _ => "/"
                };

                _logger.LogInformation("Navigating to: {TargetPage}", targetPage);
                NavigationManager.NavigateTo(targetPage, forceLoad: true);
            }
            else
            {
                errorMessage = result.Message ?? "Login failed. Please try again.";
                _logger.LogWarning("Login failed for {Email}: {Message}",
                    loginModel.Email, errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred during login";
            _logger.LogError(ex, "Login error for {Email}. Token present: {HasToken}",
                loginModel.Email,
                result != null && !string.IsNullOrEmpty(result.Token));
        }
        finally
        {
            isProcessing = false;
            if (!string.IsNullOrEmpty(errorMessage))
            {
                _logger.LogDebug("Login flow completed with error: {ErrorMessage}", errorMessage);
            }
        }
    }
}