@page "/Medchain/login/"
@using MedChain_BLL.DTOs
@using MedChain_BLL.Interfaces
@using MedChain_Models.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedSessionStorage ProtectedSessionStore
@inject SignInManager<ApplicationUser> SignInManager

<div class="login-container">
    <h2>Login</h2>

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <div class="mt-3">
        <span>Don't have an account? </span>
        <a href="/Medchain/Register/">Register here</a>
    </div>
</div>

@code {
    private LoginDTO loginModel = new();
    private string? errorMessage;
    private bool isProcessing = false;

    private async Task HandleLogin()
    {
        if (isProcessing) return;
        isProcessing = true;
        errorMessage = null;

        try
        {
            if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                errorMessage = "Please enter both email and password";
                isProcessing = false;
                return;
            }

            var result = await AuthService.Login(loginModel);

            if (result.IsSuccess && !string.IsNullOrEmpty(result.Token))
            {
                // Store token
                await ProtectedSessionStore.SetAsync("authToken", result.Token);

                // Notify authentication state change
                if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
                {
                    await customProvider.NotifyUserAuthenticationAsync(result.Token);
                }

                // Navigate to appropriate page
                NavigationManager.NavigateTo(result.Role switch
                {
                    "Admin" => "/admin",
                    "Doctor" => "/doctordashboard",
                    "Patient" => "/patient",
                    _ => "/"
                }, forceLoad: true);
            }
            else
            {
                errorMessage = result.Message ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}